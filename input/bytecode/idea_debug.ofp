void main() {
    int a = 2;
    int c = 2;
    a = -6;
    float b = t(4.3, 2.0, 1.0);
    println(b);

    string str = "abcds";
    println(str.length);

    int l = "abbsaj".length;
    println(l);

    char ch = 'a';
    char cd = ch;
    println(cd);

    println(a < c);

    char[] arr = {'s', 'd'};
    arr[1] = 'w';
    println(arr[1]);

    while (a < 1){
        print("Hello ");
        println(a);
        a = a + 1;
    }

    println(1234124123412364612347691823648912364871234689712346);
    println(-1234124123412364612347691823648912364871234689712346);
    println(0);

    testArithmetic();
    testArrays();
    testBool();
    testFloat();
    testMax();
    testRecursion();
    testWhile();
    testStrings();
}

float t(float val, float m, float t) {
    println("Hello world");
    float a = val - m;
    return a + t;
}

void testArithmetic() {
    int p;
    int q;
    int r;
    p = 2;
    q = p+2;
    r = p+q*3;
    println(-(r+1));  # -15
    print(-1 + 3 * (14 - 4));
    print(' ');
    println(ceilDiv(9, 4));

    float a = 2.0 - (1.0 + 0.2345);
    float b = a+2.0;
    float c = a+b*3.0;
    println(c);   # 9.062
    print(-4.2 + 3.0 * (c - 0.062));
    print(' ');
    println(-(c + -a * -(-(-4.0 * b))));
}

int ceilDiv(int a, int b) {
    int c;
    c = a / b;
    return -(-(a + (a - 1)) / b);
}

void testArrays() {
    int[] a = new int[10];
    int i = 0;
    int n = 2;
    while (i < a.length) {
        a[i] = n;
        n = 2*n;
        i = i + 1;
    }

    int[] rev = reverse(a);
    printArray(rev);

    float[] f = {9.3,8.8,17.5,1.0,2.1,3.2, 4.4};
    println(f[0]);   # 9.3
    float max = findMax(f);
    println(max);    # 17.5
    selectionSort(f);
    println(f[f.length-1]);  # print last ==> also 17.5
}

int[] reverse(int[] arr) {
	int sz = arr.length;
	int[] toReturn = new int[sz];
	int i = 0;
	int n = 2;
	while (i < sz) {
		int n = arr[sz-i-1];
		toReturn[i] = n;
		i = i + 1;
	}
	return toReturn;
}

void printArray(int[] arr) {
	print(arr[0]);   # First element
	int i = 0;
	while(i<arr.length) {
		int n = arr[i];
		print(" ");
		print(n);
		i = i + 1;
	}
	println(" ");
}

float findMax(float[] f) {
	float max = f[0];
	int i=1;
	while (i<f.length) {
		float p = f[i];
		if (p>max) {
			max = p;
		}
		i = i + 1;
	}

	return max;
}

void selectionSort(float[] arr){
	int i = 0;
    while (i < arr.length - 1)  {
        int smallest = i;
        int j = i+1;
        while (j < arr.length){
            if (arr[j] < arr[smallest]){
                smallest = j;    # searching for lowest index
            }
            j = j+1;
        }
        # Swap
        float smallestNumber = arr[smallest];
        arr[smallest] = arr[i];
        arr[i] = smallestNumber;
        i = i+1;
    }
}

void testBool() {
	bool b = true;
	bool bb = flip(b);
	println(bb);  # false

	bool bbb = select(b,bb,b);
	println(bbb);   # true

	int c = 42;
    bool result = ceilDiv(42, 4) > 0;
    result = result == (43 < 3) == false == true == c == 3;
    float f = 4.3;
    println(result == f < (f + 3.2));
}

bool flip(bool b) {
   if (b) return false;
   else return true;
}

bool select(bool b,bool bb, bool bbb) {
    return bbb;
}

void testFloat() {
	float f = 2.34;
	float ff = 2.0;
	float fff = mult(f,5,ff);
	println(fff);  # 4.68

	fff  = max(f,ff);
	println(fff);  # false
}

float mult(float a, int n, float b) {
   return a * b;
}

float max(float a, float b) {
   if (a>b) return a;
   else return b;
}

void testMax() {
	int p = 3;
	int q = 7;
	int res = maxOfTwo(p,q);
	println(res);        # 7

	res = maxOfThree(p,q,9);
	println(res);      # 9
}

int maxOfTwo(int a, int b) {
   if (a > b)
   	  return a;
   else
      return b;
}

int maxOfThree(int a, int b, int c) {
   if (a > b) {
      if (a > c)
   	  	 return a;
   	  else if (c > a)
   	     return c;
   	  else # c == a
   	     return c;
   } else {
      if (b > c)
   	  	 return b;
   	  else if (c > b)
   	     return c;
   	  else # c == b
   	     return c;
   }
}

void testRecursion() {
   int p = 3;
   int q = 13;
   int res = multR(p,q);
   println(res);   # 39

   res = div(q,p);
   println(res);  # 4

   int n = 8;
   res = fib(8);
   println(res);  # 34
}

# Assume a,b > 0, a*b = a + a*(b-1)
int multR(int a,int b) {
	if (b == 1)
	   return a;
    else
       return a + multR(a,b-1);
}

# Assume a,b > 0, a/b = 1 + (a-b)/b
int div(int a, int b) {
    if (a == b)
       return 1;
    else if (b > a)
       return 0;
    else
      return 1 + div(a-b,b);
}

# Assume n > 0
int fib(int n) {
   if (n == 0)
      return 1;
   else if (n == 1)
      return 1;
   else
      return fib(n-2) + fib(n-1);
}

void testWhile() {
	int n = 10;
	int res = sumUpTo(n);
	println(res);    # 55
}

# Computes 1+2+3+...+n)
int sumUpTo(int n) {
	int i = 1;
	int sum = 0;
	while (i < n+1) {
		sum = sum + i;
		i = i + 1;
	}
	return sum;
}

void testStrings() {

}
